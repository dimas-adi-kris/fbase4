"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const clc = require("cli-color");
const tmp_1 = require("tmp");
const checkIam_1 = require("./checkIam");
const api_1 = require("../../api");
const utils_1 = require("../../utils");
const fs = require("fs");
const gcs = require("../../gcp/storage");
const gcf = require("../../gcp/cloudfunctions");
const utils = require("../../utils");
const GCP_REGION = api_1.functionsUploadRegion;
tmp_1.setGracefulCleanup();
async function uploadSourceV1(context) {
    const uploadUrl = await gcf.generateUploadUrl(context.projectId, GCP_REGION);
    context.uploadUrl = uploadUrl;
    const uploadOpts = {
        file: context.functionsSource,
        stream: fs.createReadStream(context.functionsSource),
    };
    await gcs.upload(uploadOpts, uploadUrl);
}
async function uploadSourceV2(context) {
    const bucket = "staging." + (await gcs.getDefaultBucket(context.projectId));
    const uploadOpts = {
        file: context.functionsSource,
        stream: fs.createReadStream(context.functionsSource),
    };
    context.storageSource = await gcs.uploadObject(uploadOpts, bucket);
}
async function deploy(context, options, payload) {
    if (!options.config.src.functions) {
        return;
    }
    await checkIam_1.checkHttpIam(context, options, payload);
    if (!context.functionsSource) {
        return;
    }
    try {
        const want = payload.functions.backend;
        const uploads = [];
        if (want.cloudFunctions.some((fn) => fn.apiVersion === 1)) {
            uploads.push(uploadSourceV1(context));
        }
        if (want.cloudFunctions.some((fn) => fn.apiVersion === 2)) {
            uploads.push(uploadSourceV2(context));
        }
        await Promise.all(uploads);
        utils.assertDefined(options.config.src.functions.source, "Error: 'functions.source' is not defined");
        utils_1.logSuccess(clc.green.bold("functions:") +
            " " +
            clc.bold(options.config.src.functions.source) +
            " folder uploaded successfully");
    }
    catch (err) {
        utils_1.logWarning(clc.yellow("functions:") + " Upload Error: " + err.message);
        throw err;
    }
}
exports.deploy = deploy;
